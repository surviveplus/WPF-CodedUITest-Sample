// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SampleWpfApp.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddNewItem1 - Use 'AddNewItem1Params' to pass parameters into this method.
        /// </summary>
        public void AddNewItem1()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfText uIHOMEText = this.UIMainWindowWindow1.UIMainFramePane.UIHOMEText;
            WpfTable uIMainListTable = this.UIMainWindowWindow1.UIMainFramePane.UIMainListTable;
            WpfButton uIAddButton = this.UIMainWindowWindow1.UIMainFramePane.UIAddButton;
            WpfText uIADDNEWITEMText = this.UIMainWindowWindow1.UIMainFramePane.UIADDNEWITEMText;
            WpfEdit uINameEdit = this.UIMainWindowWindow1.UIMainFramePane.UINameEdit;
            WpfEdit uIDescriptionEdit = this.UIMainWindowWindow1.UIMainFramePane.UIDescriptionEdit;
            WpfButton uIOKButton = this.UIMainWindowWindow1.UIMainFramePane.UIOKButton;
            WpfCell uINewItem1Cell = this.UIMainWindowWindow1.UIMainFramePane.UIMainListTable.UIItemDataItem.UINewItem1Cell;
            #endregion

            // 最後のマウス操作が記録されませんでした。

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(148, 7));

            // Click 'HOME' label
            Mouse.Click(uIHOMEText, new Point(46, 24));

            // Click 'mainList' table
            Mouse.Click(uIMainListTable, new Point(226, 168));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(15, 6));

            // Click 'ADD NEW ITEM' label
            Mouse.Click(uIADDNEWITEMText, new Point(99, 17));

            // Type 'New Item 1' in 'name' text box
            uINameEdit.Text = this.AddNewItem1Params.UINameEditText;

            // Type 'TEST1' in 'Description' text box
            uIDescriptionEdit.Text = this.AddNewItem1Params.UIDescriptionEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(11, 22));

            // Click 'HOME' label
            Mouse.Click(uIHOMEText, new Point(55, 13));

            // Click 'New Item 1' cell
            Mouse.Click(uINewItem1Cell, new Point(42, 6));
        }
        
        /// <summary>
        /// リストアイテムが1つ追加されて表示されていること
        /// </summary>
        public void AssertListItemCount1()
        {
            #region Variable Declarations
            WpfTable uIMainListTable = this.UIMainWindowWindow1.UIMainFramePane.UIMainListTable;
            #endregion

            // Verify that the 'RowCount' property of 'mainList' table equals '1'
            Assert.AreEqual(this.AssertListItemCount1ExpectedValues.UIMainListTableRowCount, uIMainListTable.RowCount, "リストアイテムが1つ追加されて表示されていること");
        }
        
        #region Properties
        public virtual AddNewItem1Params AddNewItem1Params
        {
            get
            {
                if ((this.mAddNewItem1Params == null))
                {
                    this.mAddNewItem1Params = new AddNewItem1Params();
                }
                return this.mAddNewItem1Params;
            }
        }
        
        public virtual AssertListItemCount1ExpectedValues AssertListItemCount1ExpectedValues
        {
            get
            {
                if ((this.mAssertListItemCount1ExpectedValues == null))
                {
                    this.mAssertListItemCount1ExpectedValues = new AssertListItemCount1ExpectedValues();
                }
                return this.mAssertListItemCount1ExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private AddNewItem1Params mAddNewItem1Params;
        
        private AssertListItemCount1ExpectedValues mAssertListItemCount1ExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddNewItem1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AddNewItem1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'New Item 1' in 'name' text box
        /// </summary>
        public string UINameEditText = "New Item 1";
        
        /// <summary>
        /// Type 'TEST1' in 'Description' text box
        /// </summary>
        public string UIDescriptionEditText = "TEST1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertListItemCount1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertListItemCount1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'RowCount' property of 'mainList' table equals '1'
        /// </summary>
        public int UIMainListTableRowCount = 1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMainWindowWindow : WinWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMainWindowTitleBar.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMainWindowTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMainWindowWindow1 : WpfWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIMainFramePane UIMainFramePane
        {
            get
            {
                if ((this.mUIMainFramePane == null))
                {
                    this.mUIMainFramePane = new UIMainFramePane(this);
                }
                return this.mUIMainFramePane;
            }
        }
        #endregion
        
        #region Fields
        private UIMainFramePane mUIMainFramePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMainFramePane : WpfPane
    {
        
        public UIMainFramePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "mainFrame";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIHOMEText
        {
            get
            {
                if ((this.mUIHOMEText == null))
                {
                    this.mUIHOMEText = new WpfText(this);
                    #region Search Criteria
                    this.mUIHOMEText.SearchProperties[WpfText.PropertyNames.AutomationId] = "pageTitle";
                    this.mUIHOMEText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIHOMEText;
            }
        }
        
        public UIMainListTable UIMainListTable
        {
            get
            {
                if ((this.mUIMainListTable == null))
                {
                    this.mUIMainListTable = new UIMainListTable(this);
                }
                return this.mUIMainListTable;
            }
        }
        
        public WpfButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "appBarAddButton";
                    this.mUIAddButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WpfText UIADDNEWITEMText
        {
            get
            {
                if ((this.mUIADDNEWITEMText == null))
                {
                    this.mUIADDNEWITEMText = new WpfText(this);
                    #region Search Criteria
                    this.mUIADDNEWITEMText.SearchProperties[WpfText.PropertyNames.AutomationId] = "pageTitle";
                    this.mUIADDNEWITEMText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIADDNEWITEMText;
            }
        }
        
        public WpfEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "name";
                    this.mUINameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        
        public WpfEdit UIDescriptionEdit
        {
            get
            {
                if ((this.mUIDescriptionEdit == null))
                {
                    this.mUIDescriptionEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDescriptionEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Description";
                    this.mUIDescriptionEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDescriptionEdit;
            }
        }
        
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OKButton";
                    this.mUIOKButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIHOMEText;
        
        private UIMainListTable mUIMainListTable;
        
        private WpfButton mUIAddButton;
        
        private WpfText mUIADDNEWITEMText;
        
        private WpfEdit mUINameEdit;
        
        private WpfEdit mUIDescriptionEdit;
        
        private WpfButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMainListTable : WpfTable
    {
        
        public UIMainListTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "mainList";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIItemDataItem UIItemDataItem
        {
            get
            {
                if ((this.mUIItemDataItem == null))
                {
                    this.mUIItemDataItem = new UIItemDataItem(this);
                }
                return this.mUIItemDataItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemDataItem mUIItemDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemDataItem : WpfControl
    {
        
        public UIItemDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfCell UINewItem1Cell
        {
            get
            {
                if ((this.mUINewItem1Cell == null))
                {
                    this.mUINewItem1Cell = new WpfCell(this);
                    #region Search Criteria
                    this.mUINewItem1Cell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Name";
                    this.mUINewItem1Cell.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUINewItem1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUINewItem1Cell;
        #endregion
    }
}
